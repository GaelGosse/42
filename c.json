{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"printf": {
		"prefix": "pf",
		"body": "printf(\"${0}\\\\n\");",
		"description": "Snippet for printf %d variable"
	},
	"printf %c variable": {
		"prefix": "pfc",
		"body": "printf(\"${1:var}: %c\\\\n\", ${1:var});",
		"description": "Snippet for printf %c variable"
	},
	"printf %s variable": {
		"prefix": "pfs",
		"body": "printf(\"${1:var}: %s\\\\n\", ${1:var});",
		"description": "Snippet for printf %s variable"
	},
	"printf %p variable": {
		"prefix": "pfp",
		"body": "printf(\"${1:var}: %p\\\\n\", ${1:var});",
		"description": "Snippet for printf %p variable"
	},
	"printf %d variable": {
		"prefix": "pfd",
		"body": "printf(\"${1:var}: %d\\\\n\", ${1:var});",
		"description": "Snippet for printf %d variable"
	},
	"printf %i variable": {
		"prefix": "pfi",
		"body": "printf(\"${1:var}: %i\\\\n\", ${1:var});",
		"description": "Snippet for printf %i variable"
	},
	"printf %li variable": {
		"prefix": "pfli",
		"body": "printf(\"${1:var}: %li\\\\n\", ${1:var});",
		"description": "Snippet for printf %li variable"
	},
	"printf %u variable": {
		"prefix": "pfu",
		"body": "printf(\"${1:var}: %u\\\\n\", ${1:var});",
		"description": "Snippet for printf %u variable"
	},
	"printf %x variable": {
		"prefix": "pfx",
		"body": "printf(\"${1:var}: %x\\\\n\", ${1:var});",
		"description": "Snippet for printf %x variable"
	},
	"printf %X variable": {
		"prefix": "pfX",
		"body": "printf(\"${1:var}: %X\\\\n\", ${1:var});",
		"description": "Snippet for printf %X variable"
	},
	"structure if": {
		"prefix": [
			"if",
		],
		"body": [
			"if ($1 == $2)",
			"{",
			"\t$3",
			"}",
		],
	},
	"structure if elif": {
		"prefix": [
			"elif",
		],
		"body": [
			"if ($1 == $2)",
			"{",
			"\t$3",
			"}",
			"elif ($4 == $5)",
			"{",
			"\t$6",
			"}",
			"else",
			"{",
			"\t$7",
			"}",
		],
	},
	"structure if else": {
		"prefix": [
			"ife",
		],
		"body": [
			"if ($1 == $2)",
			"{",
			"\t$3",
			"}",
			"else",
			"{",
			"\t$4",
			"}",
		],
	},
	"structure if else short": {
		"prefix": [
			"ifs",
		],
		"body": [
			"if ($1 == $2)",
			"\t$3",
			"else",
			"\t$4",
		],
	},
	"structure while": {
		"prefix": [
			"while",
		],
		"body": [
			"while ($1 == $2)",
			"{",
			"\t$3",
			"}",
		],
	},
}
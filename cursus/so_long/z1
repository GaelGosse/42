==118300== Memcheck, a memory error detector
==118300== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==118300== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==118300== Command: ./so_long maps/map_1.ber
==118300== Parent PID: 70817
==118300== 
==118300== Use of uninitialised value of size 8
==118300==    at 0x10FDBF: ft_parsing (in /mnt/nfs/homes/ggosse/42/cursus/so_long/so_long)
==118300==    by 0x10FF5B: main (in /mnt/nfs/homes/ggosse/42/cursus/so_long/so_long)
==118300==  Uninitialised value was created by a stack allocation
==118300==    at 0x10FF01: main (in /mnt/nfs/homes/ggosse/42/cursus/so_long/so_long)
==118300== 
==118300== Invalid write of size 4
==118300==    at 0x10FDBF: ft_parsing (in /mnt/nfs/homes/ggosse/42/cursus/so_long/so_long)
==118300==    by 0x10FF5B: main (in /mnt/nfs/homes/ggosse/42/cursus/so_long/so_long)
==118300==  Address 0x24 is not stack'd, malloc'd or (recently) free'd
==118300== 
==118300== 
==118300== Process terminating with default action of signal 11 (SIGSEGV)
==118300==  Access not within mapped region at address 0x24
==118300==    at 0x10FDBF: ft_parsing (in /mnt/nfs/homes/ggosse/42/cursus/so_long/so_long)
==118300==    by 0x10FF5B: main (in /mnt/nfs/homes/ggosse/42/cursus/so_long/so_long)
==118300==  If you believe this happened as a result of a stack
==118300==  overflow in your program's main thread (unlikely but
==118300==  possible), you can try to increase the size of the
==118300==  main thread stack using the --main-stacksize= flag.
==118300==  The main thread stack size used in this run was 8388608.
==118300== 
==118300== HEAP SUMMARY:
==118300==     in use at exit: 0 bytes in 0 blocks
==118300==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==118300== 
==118300== All heap blocks were freed -- no leaks are possible
==118300== 
==118300== For lists of detected and suppressed errors, rerun with: -s
==118300== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

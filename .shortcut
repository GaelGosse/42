#!/bin/sh

# lite
BLACK="\033[0;30m"
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
BLUE="\033[0;34m"
PURPLE="\033[0;35m"
CYAN="\033[0;36m"
WHITE="\033[0;37m"

# bold color
BOLD_BLACK="\033[1;30m"
BOLD_RED="\033[1;31m"
BOLD_GREEN="\033[1;32m"
BOLD_YELLOW="\033[1;33m"
BOLD_BLUE="\033[1;34m"
BOLD_PURPLE="\033[1;35m"
BOLD_CYAN="\033[1;36m"
BOLD_WHITE="\033[1;37m"

# background
BACK_BLACK="\033[0;40m"
BACK_RED="\033[0;41;30m"
BACK_GREEN="\033[0;42;30m"
BACK_YELLOW="\033[0;43;30m"
BACK_BLUE="\033[0;44;30m"
BACK_PURPLE="\033[0;45;30m"
BACK_CYAN="\033[0;46;30m"
BACK_WHITE="\033[0;47;30m"

RESET="\033[0m"


alias gcw='gcc -Wall -Wextra -Werror -g'
alias out='./a.out'

alias gcl='git clone'
alias norm='norminette -R CheckForbiddenSourceHeader'
alias c='clear'

alias z='source ~/.zshrc'
alias b='source ~/.bashrc'

alias set_rc='cp -f ~/42/.shortcut ~/.'
alias get_rc='cp -f ~/.shortcut ~/42/.'

# shortcut
function poush()
{
	date
	# take .shortcut at ~/.
	cp ~/.config/Code/User/snippets/c.json ~/42/. && cp -f ~/.shortcut ~/42/.
	git add .
	git commit -m $1
	git push
}

function pull()
{
	date
	git pull && cp -f ~/42/. ~/.config/Code/User/snippets/c.json && cp -f ~/42/.shortcut ~/.
}

function cfg()
{
	a=$(pwd)
	cd && code .shortcut
	cd $a
}

function cpl()
{
	rm -f *.gch
	rm -f */*.gch
	gcc -Wall -Wextra -Werror $@ && ./a.out
}

function cpla()
{
	if [[ "$#" > 1 ]]; then
		echo "something wrong with args"
	elif [[ "$#" == 1 ]]; then
		if [ "${1/-*t}" != $1 ]; then
			rm -f *.gch
		fi
		if [ "${1/-*T}" != $1 ]; then
			rm -f */*.gch
		fi
		if [ "${1/-*m}" != $1 ]; then
			make
		fi
		if [ "${1/-*s}" != $1 ]; then
			gcc -Wall -Wextra -Werror *.c *.h */*.c */*.h && ./a.out
		else
			gcc -Wall -Wextra -Werror *.c *.h && ./a.out
		fi
	elif [[ "$#" == 0 ]]; then
		gcc -Wall -Wextra -Werror -g *.c *.h && ./a.out
	fi

}

# with args
function refresh()
{
	if [[ "$#" > 0 ]]; then
		while true; do
			rm -f *.gch
			gcc -Wall -Wextra -Werror $@ && ./a.out
			sleep 1
		done
	else
		echo "no args"
	fi
}

# all
function refresha()
{
	while true; do
		rm -f *.gch
		gcc -Wall -Wextra -Werror -DTEST *.c *.h && ./a.out
		sleep 1
	done
}

# all sub
function refresh_all()
{
	while true; do
		rm -f *.gch && rm -f */*.gch
		gcc -Wall -Wextra -Werror *.c *.h */*.c */*.h && ./a.out
		sleep 1
	done
}

# norm refresh
function refreshn()
{
	while true; do
		echo -e "$BACK_GREEN\n	----- ----- NORMINETTE ----- ----- $RESET" 
		norminette -R CheckForbiddenSourceHeader
		sleep 5
	done
}

function clr()
{
	if [[ "${1/-f}" != $1 ]]; then
		rm -f *.gch
		rm -f a.out
		rm -rf .vscode
		clear
	else
		echo "are you sure to clear :\n_ file.gch\n_ a.out\n_ .vscode\n?\n"
		read -r answer
		if [[ $answer == "yes" || $answer == "y" ]]; then
			rm -f *.gch
			rm -f a.out
			rm -rf .vscode
			clear
		else
			echo "nothing happens"
		fi
	fi
}

function crt()
{
	if [[ ! -d "$1" ]]; then
		mkdir $1 && cd $1 && code . 
	else
		echo "$1 already exist"
	fi
}





# part test
function t1()
{
	# see all the args
	for var in "$@"
	do
		echo "$var"
	done
}

function t2()
{
	a="some long string"
    b="ri"
	# return the rest of the occurence
	echo $a | grep -o "$b.*"
}

function t3()
{
	# get args after the second
	echo "${@:2}"
	# get args after the third
	echo "${@:3}"
}

function t4()
{
	# get nbr of args
	echo "$#"
}

function t5()
{
	# check if there is something like "- * s"
	str="-ms"
	a1="${str/e}"
	a2="${str/m}"
	if [ "${str/e}" == $str ]; then
		echo "nothing"
	else
		echo "something here"
	fi
	if [ "${str/-*s}" == $str ]; then
		echo "nothing"
	else
		echo "something here"
	fi
}

function t6()
{
	# check if there is something like "- * m" in the 1st arg
	if [[ "${1/-*m}" != $1 ]]; then
		echo "there is m"
	else
		echo "nothing"
	fi
}

function t7()
{
	echo "${BASH_SOURCE}"
	echo "${BASH_SOURCE}"
}

function t8()
{
	echo $(if [[ $(free | wc -l) > 1 ]]; then echo on; else echo off; fi)
}

function t9()
{
	tmp='%n@%m'
	tmp='%u'
	echo ${(%)tmp}
	
	# bash
	# tmp=$(set +x; (PS4='+.\u@\h'; set -x; :) 2>&1); tmp=${tmp#*.}; echo ${tmp%:}
}

function t10()
{
	# SPLIT

	#Define the string value
	text="Welcome to LinuxHint"

	# Set space as the delimiter
	IFS=' '

	#Read the split words into an array based on space delimiter
	read -a strarr <<< "$text"

	#Count the total words
	echo "There are ${#strarr[*]} words in the text."

	# Print each value of the array by using the loop
	for val in "${strarr[@]}";
	do
	printf "$val\n"
	done
}

# google-chrome-stable https://pythontutor.com/c.html#mode=edit

function t11()
{
	if test -f "*.c"; then
		echo "ok"
	else
		echo "nothing"
	fi
}

function t12()
{
	FILES="/home/gael/*"
	for file in $FILES
	do
		dir="$(dirname "${file}")"
		filename="$(basename "${file}")"
		if [[ -f $file ]]; then
			echo -e "$GREEN $dir / $filename"
		elif [[ -d $file ]]; then
			echo -e "$CYAN $dir / $filename"
		else
			echo -e "$YELLOW $dir / $filename"
		fi
	done
}

# function t13()
# {
# 	each file
# 	for file in "$/."; do
# 		if [ -d $file ]
# 		then
# 				# do something directory-ish
# 		else
# 				if [ "$file" == "*.txt" ]       #  this is the snag
# 				then
# 						# do something txt-ish
# 				fi
# 		fi
# 	done;
# }

#define malloc(...) NULL

#define prinT(str, __VA_ARG__)\
	#ifdef TEST\
		# printf(str, ##VA_ARG);\
	#endif\